import streamlit as st
from PIL import Image
import pickle
import os

st.set_page_config(layout="wide")
# m = st.markdown(
#     """
# <style>
# div.stButton > button:first-child {
#     background-color: rgb(100, 80, 49);
# }
# </style>""",
#     unsafe_allow_html=True,
# )

st.session_state["admin_mode"] = False

if not "clean_start" in st.session_state.keys():
    print("hey", os.getcwd())
    st.session_state["clean_start"] = True
    st.session_state.data = {}
    for pickle_file in [
        "captions_gold",
        "explains_gold",
        "gpt3-5_predictions_gold",
        "imgs_gold",
        "labels_gold",
        "texts_gold",
        "confidence_gold",
    ]:
        with open(f"ui/pickles/{pickle_file}.pickle", "rb") as handle:
            st.session_state.data[pickle_file] = pickle.load(handle)
    with open("ui/pickles/subtask1A_english.tsv", "r") as f:
        st.session_state.data["discr_preds_gold"] = [
            x.split("\t")[1] for x in f.readlines()[1:]
        ]

st.write("# Check That!")

if not "tweet_idx" in st.session_state.keys():
    st.session_state["tweet_idx"] = 0

col1, col2, col3 = st.columns([0.3, 0.3, 0.4])
col1.write(f"### Tweet {st.session_state['tweet_idx']}")
col1.text_area(
    "Tweet content",
    value=st.session_state.data["texts_gold"][st.session_state["tweet_idx"]],
    height=300,
)
col2.image(
    st.session_state.data["imgs_gold"][st.session_state["tweet_idx"]],
    caption=st.session_state.data["captions_gold"][st.session_state["tweet_idx"]],
)
col2.caption("Caption automatically generated by BLIP")
but1, _, but2 = col1.columns([0.45, 0.05, 0.45])
if but1.button("Previous Tweet", use_container_width=True):
    st.session_state["tweet_idx"] = (
        st.session_state["tweet_idx"] - 1
        if st.session_state["tweet_idx"] > 0
        else st.session_state["tweet_idx"]
    )
    st.experimental_rerun()

if but2.button("Next Tweet", use_container_width=True):
    st.session_state["tweet_idx"] = (
        st.session_state["tweet_idx"] + 1
        if st.session_state["tweet_idx"] < len(st.session_state.data["captions_gold"])
        else st.session_state["tweet_idx"]
    )
    st.experimental_rerun()

col1.write("## Does this tweet require fact checking?")

if col1.button("Yes!", type="primary", use_container_width=True):
    st.session_state["user_opinion"] = "Yes ✅"
if col1.button("No!", use_container_width=True):
    st.session_state["user_opinion"] = "No ❌"

if st.session_state.get("user_opinion", None):
    col3.write(
        f"## Your opinion: {st.session_state.get('user_opinion', 'none')}"
        if not st.session_state["admin_mode"]
        else "## Admin mode on."
    )
    if not st.session_state["admin_mode"]:
        st.session_state["user_opinion"] = None
    mod1, mod2, mod3 = col3.columns([0.30, 0.30, 0.40])
    mod1.write("##### Groundtruth")
    render_func = (
        st.success
        if st.session_state.data["labels_gold"][st.session_state["tweet_idx"]] == 1
        else st.error
    )
    with mod1:
        render_func(
            "Yes"
            if st.session_state.data["labels_gold"][st.session_state["tweet_idx"]] == 1
            else "No"
        )

    mod2.write("##### Discriminative Model")
    render_func = (
        st.success
        if st.session_state.data["discr_preds_gold"][st.session_state["tweet_idx"]]
        == "Yes"
        else st.error
    )
    with mod2:
        render_func(
            st.session_state.data["discr_preds_gold"][st.session_state["tweet_idx"]]
        )
    mod2.write(
        f"Model confidence: {int(st.session_state.data['confidence_gold'][st.session_state['tweet_idx']])}%"
    )

    mod3.write("##### ChatGPT")
    render_func = (
        st.success
        if st.session_state.data["gpt3-5_predictions_gold"][
            st.session_state["tweet_idx"]
        ]
        == 1
        else st.error
    )
    with mod3:
        render_func(
            "Yes"
            if st.session_state.data["gpt3-5_predictions_gold"][
                st.session_state["tweet_idx"]
            ]
            == 1
            else "No"
        )

    mod3.text_area(
        "ChatGPT's Explanation",
        value=st.session_state.data["explains_gold"][st.session_state["tweet_idx"]]
        if len(st.session_state.data["explains_gold"][st.session_state["tweet_idx"]])
        > 50
        else "No explanations were received from ChatGPT for this one. :(",
        height=500,
    )
